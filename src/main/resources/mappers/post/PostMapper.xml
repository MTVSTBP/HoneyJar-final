<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tbp.honeyjar.post.dao.PostMapper">

    <!-- 포스트 리스트 조회 -->
    <resultMap id="postListResultMap" type="com.tbp.honeyjar.post.dto.PostListDTO">
        <id property="postId" column="post_id"/>
        <id property="placeId" column="place_id"/>
        <result property="postTitle" column="title"/>
        <result property="post" column="post"/>
        <result property="mainImageUrl" column="main_image_url"/>
        <result property="bookmarked" column="bookmarked"/>
        <result property="categoryId" column="category_id"/>
        <result property="userName" column="user_name"/>
        <result property="xCoordinate" column="x_coordinate"/>
        <result property="yCoordinate" column="y_coordinate"/>
        <result property="distance" column="distance"/>
        <!-- <result property="profileImg" column="profile_img"/> -->
    </resultMap>

    <!-- 포스트 상세 조회 -->
    <resultMap id="postResponseResultMap" type="com.tbp.honeyjar.post.dto.PostResponseDTO">
        <id property="postId" column="post_id"/>
        <id property="placeId" column="place_id"/>
        <id property="userId" column="user_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="name"/>
        <result property="title" column="title"/>
        <result property="recommendMenu" column="recommend_menu"/>
        <result property="price" column="price"/>
        <result property="post" column="post"/>
        <result property="placeName" column="place_name"/>
        <result property="roadAddressName" column="road_address_name"/>
        <result property="xCoordinate" column="x_coordinate"/>
        <result property="yCoordinate" column="y_coordinate"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="userName" column="user_name"/>
        <result property="bookmarked" column="bookmarked"/>
        <collection property="imageUrls" ofType="java.lang.String">
            <result column="url"/>
        </collection>
    </resultMap>

    <resultMap id="imageResultMap" type="com.tbp.honeyjar.image.dto.ImageDTO">
        <id property="imageId" column="image_id"/>
        <result property="url" column="url"/>
        <result property="isMain" column="is_main"/>
    </resultMap>

    <!-- 포스트 리스트 조회 쿼리 -->
<!--    <select id="findPostsByCategory" resultMap="postListResultMap">-->
<!--        SELECT-->
<!--        p.post_id,-->
<!--        p.title,-->
<!--        p.post,-->
<!--        i.url AS main_image_url,-->
<!--        CASE-->
<!--        WHEN b.post_id IS NOT NULL THEN true-->
<!--        ELSE false-->
<!--        END AS bookmarked,-->
<!--        p.category_id,-->
<!--        u.name AS user_name-->
<!--        FROM post p-->
<!--        LEFT JOIN (-->
<!--        SELECT post_id, url-->
<!--        FROM image-->
<!--        WHERE is_main = 1-->
<!--        ) i ON p.post_id = i.post_id-->
<!--        LEFT JOIN bookmark b ON p.post_id = b.post_id AND b.user_id = #{userId}-->
<!--        LEFT JOIN user u ON p.user_id = u.user_id-->
<!--        WHERE p.deleted = FALSE-->
<!--        <if test="category != null">-->
<!--            AND p.category_id = #{category}-->
<!--        </if>-->
<!--        <if test="maxPrice != null">-->
<!--            AND p.price &lt;= #{maxPrice}-->
<!--        </if>-->
<!--        ORDER BY p.created_at DESC-->
<!--        LIMIT #{size} OFFSET #{offset}-->
<!--    </select>-->

    <select id="findPostsByCategory" resultMap="postListResultMap" parameterType="map">
        SELECT
        p.post_id,
        p.title,
        p.post,
        i.url AS main_image_url,
        CASE
        WHEN b.post_id IS NOT NULL THEN true
        ELSE false
        END AS bookmarked,
        p.category_id,
        u.name AS user_name,
        pl.place_id,
        pl.x_coordinate,
        pl.y_coordinate
        <if test="latitude != null and longitude != null">
            , (6371 * acos(
            cos(radians(#{latitude})) * cos(radians(pl.x_coordinate))
            * cos(radians(pl.y_coordinate) - radians(#{longitude}))
            + sin(radians(#{latitude})) * sin(radians(pl.x_coordinate))
            )) AS distance
        </if>
        FROM post p
        LEFT JOIN place pl ON p.place_id = pl.place_id
        LEFT JOIN (
        SELECT post_id, url
        FROM image
        WHERE is_main = 1
        ) i ON p.post_id = i.post_id
        LEFT JOIN bookmark b ON p.post_id = b.post_id AND b.user_id = #{userId}
        LEFT JOIN user u ON p.user_id = u.user_id
        WHERE p.deleted = FALSE
        <if test="category != null">
            AND p.category_id = #{category}
        </if>
        <if test="maxPrice != null">
            AND p.price &lt;= #{maxPrice}
        </if>
        <choose>
            <when test="sortOption == 'distance' and latitude != null and longitude != null">
                ORDER BY distance DESC
            </when>
            <otherwise>
                ORDER BY p.created_at DESC
            </otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>





    <!-- 변경된 포스트 상세 조회 쿼리 -->
    <select id="findPostById" resultMap="postResponseResultMap">
        SELECT
        p.post_id,
        p.category_id,
        p.title,
        p.recommend_menu,
        p.price,
        p.post,
        p.created_at,
        p.updated_at,
        p.place_id,
        pl.name AS place_name,
        pl.road_address_name,
        pl.x_coordinate,
        pl.y_coordinate,
        i.url,
        u.name AS user_name,
        p.user_id,
        CASE
        WHEN b.post_id IS NOT NULL THEN true
        ELSE false
        END AS bookmarked
        FROM post p
        LEFT JOIN place pl ON p.place_id = pl.place_id
        LEFT JOIN image i ON p.post_id = i.post_id
        LEFT JOIN user u ON p.user_id = u.user_id
        LEFT JOIN bookmark b ON p.post_id = b.post_id AND b.user_id = #{userId}
        WHERE p.post_id = #{postId} AND p.deleted = FALSE
        ORDER BY i.is_main DESC, i.image_id ASC
    </select>


    <!-- 포스트 등록 쿼리 -->
    <insert id="createPost" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (
            title,
            recommend_menu,
            price,
            post,
            created_at,
            updated_at,
            place_id,
            user_id,
            category_id
        )
        VALUES (
            #{title},
            #{recommendMenu},
            #{price},
            #{post},
            NOW(),
            NOW(),
            #{placeId},
            #{userId},
            #{categoryId}
        )
    </insert>

    <!-- postId로 placeId 조회 -->
    <select id="findPlaceIdByPostId" resultType="java.lang.Long">
        SELECT place_id
        FROM post
        WHERE post_id = #{postId}
    </select>

    <!-- 포스트 수정 쿼리 -->
    <update id="updatePost" parameterType="com.tbp.honeyjar.post.dto.PostRequestDTO">
        UPDATE post
        SET
            title = #{title},
            recommend_menu = #{recommendMenu},
            price = #{price},
            post = #{post},
            updated_at = NOW(),
            place_id = #{placeId},
            category_id = #{categoryId}
        WHERE post_id = #{postId}
    </update>

    <!-- 포스트 소프트 삭제 쿼리 -->
    <update id="softDeletePost">
        UPDATE post
        SET deleted = TRUE
        WHERE post_id = #{postId}
    </update>

    <!-- 포스트 좋아요 쿼리 -->
    <insert id="likePost" parameterType="com.tbp.honeyjar.post.dto.PostLikeRequestDto">
        INSERT INTO LIKED
        (
            post_id,
            user_id
        )
        VALUES
        (
            #{postId},
            #{userId}
        )
    </insert>

    <!-- 포스트 좋아요 취소 쿼리 -->
    <delete id="unlikePost" parameterType="com.tbp.honeyjar.post.dto.PostLikeRequestDto">
        DELETE FROM LIKED
        WHERE
        post_id = #{postId} and user_id = #{userId}
    </delete>

    <!-- 포스트 좋아요 카운트 쿼리 -->
    <select id="getLikeCountByPostId" parameterType="_long">
        SELECT
            COUNT(*)
        FROM
            LIKED
        WHERE
            post_id = #{postId}
    </select>

    <!-- 포스트 좋아요 확인 쿼리 -->
    <select id="getIsLikedByPostIdAndUserId" parameterType="com.tbp.honeyjar.post.dto.PostLikeRequestDto">
        SELECT
            COUNT(*)
        FROM
            LIKED
        WHERE
            post_id = #{postId} AND user_id = #{userId}
    </select>

    <!-- 포스트 평점 조회 쿼리 -->
    <select id="getRating" parameterType="_long">
        SELECT
            COALESCE(ROUND(AVG(rating), 1), 0.0)
        FROM
            ratings
        WHERE
            place_id = (SELECT place_id
        FROM post
        WHERE post_id = #{postId})
    </select>

    <!-- 포스트 평점 입력 쿼리 -->
    <insert id="rating" parameterType="com.tbp.honeyjar.post.dto.PostRatingRequestDto">
        INSERT INTO ratings
        (
            user_id,
            place_id,
            rating
        )
        VALUES
        (
            #{userId},
            (SELECT place_id
            FROM post
            WHERE post_id = #{postId}),
            #{rating}
        )
    </insert>

    <!-- 포스트 평점 확인 쿼리 -->
    <select id="getIsRatedByPostIdAndUserId" parameterType="com.tbp.honeyjar.post.dto.PostLikeRequestDto">
        SELECT
            COUNT(*)
        FROM
            ratings
        WHERE
            place_id = (SELECT place_id FROM post WHERE post_id = #{postId}) AND user_id = #{userId}
    </select>

    <!-- 포스트 평점 업데이트 쿼리 -->
    <update id="ratingAgain" parameterType="com.tbp.honeyjar.post.dto.PostRatingRequestDto">
        UPDATE ratings
        SET
            rating = #{rating}
        WHERE
            place_id = (SELECT place_id FROM post WHERE post_id = #{postId}) AND user_id = #{userId}
    </update>

    <!-- 코멘트 count -->
    <select id="commentCount" resultType="int">
        SELECT
                COUNT(*)
        FROM
                COMMENT
        WHERE
                POST_ID = #{ post_id }
    </select>
</mapper>
