<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tbp.honeyjar.post.dao.PostMapper">

    <!-- 포스트 리스트 조회 -->
    <resultMap id="postListResultMap" type="com.tbp.honeyjar.post.dto.PostListDTO">
        <id property="postId" column="post_id"/>
        <result property="postTitle" column="title"/>
        <result property="post" column="post"/>
        <result property="mainImageUrl" column="main_image_url"/>
        <result property="bookmarked" column="bookmarked"/>
        <!-- <result property="profileImg" column="profile_img"/> -->
    </resultMap>

    <!-- 포스트 상세 조회 -->
    <resultMap id="postResponseResultMap" type="com.tbp.honeyjar.post.dto.PostResponseDTO">
        <id property="postId" column="post_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="name"/>
        <result property="title" column="title"/>
        <result property="recommendMenu" column="recommend_menu"/>
        <result property="price" column="price"/>
        <result property="post" column="post"/>
        <result property="placeId" column="place_id"/>
        <result property="placeName" column="place_name"/>
        <result property="xCoordinate" column="x_coordinate"/>
        <result property="yCoordinate" column="y_coordinate"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <collection property="imageUrls" ofType="java.lang.String">
            <result column="url"/>
        </collection>
    </resultMap>


    <resultMap id="imageResultMap" type="com.tbp.honeyjar.image.dto.ImageDTO">
        <id property="imageId" column="image_id"/>
        <result property="url" column="url"/>
        <result property="isMain" column="is_main"/>
    </resultMap>

    <!-- 포스트 리스트 조회 쿼리 -->
    <select id="findAllPost" resultMap="postListResultMap">
        SELECT
        p.post_id,
        p.title,
        p.post,
        i.url AS main_image_url,
        CASE
        WHEN b.post_id IS NOT NULL THEN true
        ELSE false
        END AS bookmarked
        FROM post p
        LEFT JOIN (
        SELECT post_id, url
        FROM image
        WHERE is_main = 1
        )
        i ON p.post_id = i.post_id
        LEFT JOIN bookmark b ON p.post_id = b.post_id
        <!--LEFT JOIN user u ON p.user_id = u.user_id-->
    </select>

    <!-- 포스트 상세 조회 쿼리 -->
    <select id="findPostById" resultMap="postResponseResultMap">
        SELECT
        p.post_id,
        p.category_id,
        p.title,
        p.recommend_menu,
        p.price,
        p.post,
        p.created_at,
        p.updated_at,
        p.place_id,
        pl.name AS place_name,
        pl.x_coordinate,
        pl.y_coordinate,
        i.url
        FROM post p
        LEFT JOIN place pl ON p.place_id = pl.place_id
        LEFT JOIN image i ON p.post_id = i.post_id
        WHERE p.post_id = #{postId}
        ORDER BY i.is_main DESC, i.image_id ASC
    </select>


    <!-- 포스트 등록 쿼리 -->
    <insert id="createPost" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (
        title,
        recommend_menu,
        price,
        post,
        created_at,
        place_id,
        user_id,
        category_id
        )
        VALUES (
        #{title},
        #{recommendMenu},
        #{price},
        #{post},
        NOW(),
        #{placeId},
        #{userId},
        #{categoryId}
        )
    </insert>

    <!-- 포스트 수정 쿼리 -->
    <update id="updatePost">
        UPDATE post
        SET
        title = #{title},
        recommend_menu = #{recommendMenu},
        price = #{price},
        post = #{post},
        updated_at = NOW(),
        place_id = #{placeId},
        category_id = #{categoryId}
        WHERE post_id = #{postId}
    </update>

    <!-- 포스트 좋아요 쿼리 -->
    <insert id="likePost" parameterType="com.tbp.honeyjar.post.dto.PostLikeRequestDto">
        INSERT INTO LIKED
        (
        post_id,
        user_id
        )
        VALUES
        (
        #{postId},
        #{userId}
        )
    </insert>

    <!-- 포스트 좋아요 취소 쿼리 -->
    <delete id="unlikePost" parameterType="com.tbp.honeyjar.post.dto.PostLikeRequestDto">
        DELETE FROM LIKED
        WHERE
            post_id = #{postId} and user_id = #{userId}
    </delete>
</mapper>
